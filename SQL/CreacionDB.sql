/* ---------------------------------------------------- */
/*  Generated by Enterprise Architect Version 16.1 		*/
/*  Created On : 25-abr.-2024 19:21:23 				*/
/*  DBMS       : PostgreSQL 						*/
/* ---------------------------------------------------- */

/* Drop Tables */

DROP TABLE IF EXISTS Apartamento CASCADE
;

DROP TABLE IF EXISTS Concepto CASCADE
;

DROP TABLE IF EXISTS Conjunto CASCADE
;

DROP TABLE IF EXISTS CuentaCobro CASCADE
;

DROP TABLE IF EXISTS DetalleCuenta CASCADE
;

DROP TABLE IF EXISTS Pago CASCADE
;

DROP TABLE IF EXISTS Parqueadero CASCADE
;

DROP TABLE IF EXISTS Persona CASCADE
;

DROP TABLE IF EXISTS Reserva CASCADE
;

DROP TABLE IF EXISTS Residente CASCADE
;

DROP TABLE IF EXISTS Responsable CASCADE
;

DROP TABLE IF EXISTS ZonaComun CASCADE
;

/* Create Tables */

CREATE TABLE Apartamento
(
	k_apartamento smallint NOT NULL,
	v_area numeric(6,2) NOT NULL,	-- Limitado hasta 9999.99m2, tampoco admite ingreso de 0m2.
	v_coeficiente numeric(3,2) NOT NULL,	-- NO ES UNA TASA (O sea, que no se suma, sino que multiplica al valor base del conjunto para todos los apartamentos) No admite ingreso menor a 1, tampoco mayor a 2.
	q_bloque smallint NOT NULL,
	q_piso smallint NOT NULL,
	k_tipoPersona char(2) NOT NULL,	-- Tipo de documento entre: CC, TI, RC y CE.
	k_numeroPersona numeric(10) NOT NULL
)
;

CREATE TABLE Concepto
(
	v_valor numeric(10,2) NOT NULL,
	k_concepto smallint NOT NULL,
	n_nombre varchar(25) NOT NULL,
	k_conjunto smallint NOT NULL
)
;

CREATE TABLE Conjunto
(
	k_conjunto smallint NOT NULL,
	t_descuento numeric(5,4) NOT NULL,	-- Porcentaje en forma decimal
	t_mora numeric(5,4) NOT NULL,	-- Porcentaje en forma decimal
	v_base numeric(10,2) NOT NULL,
	q_dias smallint NOT NULL,
	o_direccion varchar(45) NOT NULL
)
;

CREATE TABLE CuentaCobro
(
	k_cuenta smallint NOT NULL,
	i_estado varchar(9) NOT NULL,	-- Estado de la Cuenta de Cobro entre: PAGADA Y PENDIENTE.
	f_expedicionCuenta date NOT NULL,	-- Fecha Expedicion Cuenta Cobro antes que Fecha Limite Descuento y antes que Fecha Pago Oportuno.
	f_pagoOportuno date NOT NULL,
	f_limite date NOT NULL,
	v_total numeric(10,2) NOT NULL,
	q_mes smallint NOT NULL,
	q_anio smallint NOT NULL,
	k_serialPago smallint NULL,
	k_apartamento smallint NOT NULL
)
;

CREATE TABLE DetalleCuenta
(
	k_detalle varchar(4) NOT NULL,
	v_valor numeric(10,2) NOT NULL,	-- No admite ser 0, para que en la Cuenta de Cobro si un Concepto no tiene costo no aparezca.
	k_concepto smallint NOT NULL,
	k_cuenta smallint NOT NULL
)
;

CREATE TABLE Pago
(
	k_serialPago smallint NOT NULL,
	i_metodo varchar(8) NOT NULL,	-- Metodo entre: EFECTIVO, DEBITO, CREDITO y ONLINE
	v_valor numeric(10,2) NOT NULL,	-- No admite ingreso de 0 porque es un pago que se haría con una entidad externa (Bancaria o de Pagos en linea), y nunca se haría un pago de $0.
	k_numeroReserva smallint NULL
)
;

CREATE TABLE Parqueadero
(
	k_parqueadero smallint NOT NULL,
	i_tipo varchar(25) NOT NULL,	-- Tipo de parqueadero entre: INDIVIDUAL, DOBLE y DISCAPACIDAD.
	k_apartamento smallint NOT NULL
)
;

CREATE TABLE Persona
(
	k_tipoPersona char(2) NOT NULL,	-- Tipo de documento entre: CC, TI, RC y CE.
	k_numeroPersona numeric(10) NOT NULL,
	n_nombre1 varchar(25) NOT NULL,
	n_nombre2 varchar(25) NULL,
	n_apellido1 varchar(25) NOT NULL,
	n_apellido2 varchar(25) NULL
)
;

CREATE TABLE Reserva
(
	k_numeroReserva smallint NOT NULL,
	f_ejecucion date NOT NULL,	-- Fecha Ejecución previa a Fecha Limite y a Fecha Reservación.
	f_limite date NOT NULL,
	i_estado varchar(9) NOT NULL,	-- Estado entre: PENDIENTE (9 caracts), PAGADA (6 caracts), CANCELADA (9 caracs), CUMPLIDA (8 caracs).
	f_reserva date NOT NULL,
	q_idReservador numeric(10) NOT NULL,
	k_zonaComun varchar(25) NOT NULL,	-- En forma mnemotécnica (No está restringido por el modelo): Piscina1, Piscina2, Piscina3, etc.
	k_serialPago smallint NULL
)
;

CREATE TABLE Residente
(
	f_nacimiento date NOT NULL,
	k_tipoPersona char(2) NOT NULL,	-- Tipo de documento entre: CC, TI, RC y CE.
	k_numeroPersona numeric(10) NOT NULL,
	k_apartamento smallint NOT NULL
)
;

CREATE TABLE Responsable
(
	o_correo text NOT NULL,	-- No hay un estandar entre empresas de Email, y la longitud del dominio (Lo que va despues de @) puede variar.
	o_telefono numeric(10) NOT NULL,
	k_tipoPersona char(2) NOT NULL,	-- Tipo de documento entre: CC, TI, RC y CE.
	k_numeroPersona numeric(10) NOT NULL
)
;

CREATE TABLE ZonaComun
(
	k_zonaComun varchar(25) NOT NULL,	-- En forma mnemotécnica (No está restringido por el modelo): Piscina1, Piscina2, Piscina3, etc.
	i_tipo varchar(25) NOT NULL,	-- Entre PISCINA, SALON, GIMNASIO Y BARBACOA
	v_costo numeric(8,2) NOT NULL,
	q_numeroDias smallint NOT NULL,
	k_conjunto smallint NOT NULL
)
;

/* Create Primary Keys, Indexes, Uniques, Checks */

ALTER TABLE Apartamento ADD CONSTRAINT PK_Apartamento
	PRIMARY KEY (k_apartamento)
;

ALTER TABLE Apartamento ADD CONSTRAINT CK_apartamento CHECK (k_apartamento > 0)
;

ALTER TABLE Apartamento ADD CONSTRAINT CK_area CHECK (v_area > 0)
;

ALTER TABLE Apartamento ADD CONSTRAINT CK_coeficiente CHECK (1 < v_coeficiente AND v_coeficiente < 2
)
;

ALTER TABLE Apartamento ADD CONSTRAINT CK_bloque CHECK (q_bloque > 0)
;

ALTER TABLE Apartamento ADD CONSTRAINT CK_piso CHECK (q_piso > 0)
;

ALTER TABLE Apartamento ADD CONSTRAINT CK_tipoPersona CHECK (k_tipoPersona in ('CC', 'TI', 'RC', 'CE'))
;

CREATE INDEX IXFK_Apartamento_Responsable ON Apartamento (k_tipoPersona ASC,k_numeroPersona ASC)
;

ALTER TABLE Concepto ADD CONSTRAINT PK_Concepto
	PRIMARY KEY (k_concepto)
;

ALTER TABLE Concepto ADD CONSTRAINT CK_valor CHECK (v_valor >= 0)
;

ALTER TABLE Concepto ADD CONSTRAINT CK_concepto CHECK (k_concepto > 0)
;

ALTER TABLE Concepto ADD CONSTRAINT CK_conjunto CHECK (k_conjunto > 0)
;

CREATE INDEX IXFK_Concepto_Conjunto ON Concepto (k_conjunto ASC)
;

ALTER TABLE Conjunto ADD CONSTRAINT PK_Conjunto
	PRIMARY KEY (k_conjunto)
;

ALTER TABLE Conjunto ADD CONSTRAINT CK_conjunto CHECK (k_conjunto > 0)
;

ALTER TABLE Conjunto ADD CONSTRAINT CK_descuento CHECK (t_descuento <= 1)
;

ALTER TABLE Conjunto ADD CONSTRAINT CK_mora CHECK (t_mora <= 1)
;

ALTER TABLE Conjunto ADD CONSTRAINT CK_base CHECK (v_base > 0)
;

ALTER TABLE Conjunto ADD CONSTRAINT CK_dias CHECK (0 <= q_dias AND q_dias <= 31)
;

ALTER TABLE CuentaCobro ADD CONSTRAINT PK_CuentaCobro
	PRIMARY KEY (k_cuenta)
;

ALTER TABLE CuentaCobro ADD CONSTRAINT CK_cuenta CHECK (k_cuenta > 0)
;

ALTER TABLE CuentaCobro ADD CONSTRAINT CK_estado CHECK (i_estado in ('PAGADA', 'PENDIENTE'))
;

ALTER TABLE CuentaCobro ADD CONSTRAINT CK_expedicionCuenta CHECK (f_expedicionCuenta < f_limite)
;

ALTER TABLE CuentaCobro ADD CONSTRAINT CK_limite CHECK (f_limite < f_pagoOportuno)
;

ALTER TABLE CuentaCobro ADD CONSTRAINT CK_total CHECK (v_total > 0)
;

ALTER TABLE CuentaCobro ADD CONSTRAINT CK_mes CHECK (0 < q_mes AND q_mes <= 12)
;

ALTER TABLE CuentaCobro ADD CONSTRAINT CK_apartamento CHECK (k_apartamento > 0)
;

CREATE INDEX IXFK_CuentaCobro_Apartamento ON CuentaCobro (k_apartamento ASC)
;

CREATE INDEX IXFK_CuentaCobro_Pago ON CuentaCobro (k_serialPago ASC)
;

ALTER TABLE DetalleCuenta ADD CONSTRAINT PK_DetalleCuenta
	PRIMARY KEY (k_detalle)
;

ALTER TABLE DetalleCuenta ADD CONSTRAINT CK_valor CHECK (v_valor > 0)
;

ALTER TABLE DetalleCuenta ADD CONSTRAINT CK_concepto CHECK (k_concepto > 0)
;

ALTER TABLE DetalleCuenta ADD CONSTRAINT CK_cuenta CHECK (k_cuenta > 0)
;

CREATE INDEX IXFK_DetalleCuenta_Concepto ON DetalleCuenta (k_concepto ASC)
;

CREATE INDEX IXFK_DetalleCuenta_CuentaCobro ON DetalleCuenta (k_cuenta ASC)
;

ALTER TABLE Pago ADD CONSTRAINT PK_Pago
	PRIMARY KEY (k_serialPago)
;

ALTER TABLE Pago ADD CONSTRAINT CK_metodo CHECK (i_metodo in ('EFECTIVO', 'DEBITO', 'CREDITO', 'ONLINE'))
;

ALTER TABLE Pago ADD CONSTRAINT CK_valor CHECK (v_valor > 0)
;

CREATE INDEX IXFK_Pago_Reserva ON Pago (k_numeroReserva ASC)
;

ALTER TABLE Parqueadero ADD CONSTRAINT PK_Parqueadero
	PRIMARY KEY (k_parqueadero)
;

ALTER TABLE Parqueadero ADD CONSTRAINT CK_parqueadero CHECK (k_parqueadero > 0)
;

ALTER TABLE Parqueadero ADD CONSTRAINT CK_tipo CHECK (i_tipo in ('INDIVIDUAL', 'DOBLE', 'DISCAPACIDAD'))
;

ALTER TABLE Parqueadero ADD CONSTRAINT CK_apartamento CHECK (k_apartamento > 0)
;

CREATE INDEX IXFK_Parqueadero_Apartamento ON Parqueadero (k_apartamento ASC)
;

ALTER TABLE Persona ADD CONSTRAINT PK_Persona
	PRIMARY KEY (k_tipoPersona,k_numeroPersona)
;

ALTER TABLE Persona ADD CONSTRAINT CK_tipoPersona CHECK (k_tipoPersona in ('CC', 'TI', 'RC', 'CE'))
;

ALTER TABLE Reserva ADD CONSTRAINT PK_Reserva
	PRIMARY KEY (k_numeroReserva)
;

ALTER TABLE Reserva ADD CONSTRAINT CK_numeroReserva CHECK (k_numeroReserva > 0)
;

ALTER TABLE Reserva ADD CONSTRAINT CK_ejecucion CHECK (f_ejecucion > f_limite)
;

ALTER TABLE Reserva ADD CONSTRAINT CK_limite CHECK (f_limite > f_reserva)
;

ALTER TABLE Reserva ADD CONSTRAINT CK_estado CHECK (i_estado in ('PAGADA', 'CANCELADA', 'PENDIENTE', 'CUMPLIDA'))
;

ALTER TABLE Reserva ADD CONSTRAINT CK_idReservador CHECK (q_idReservador > 0)
;

CREATE INDEX IXFK_Reserva_Pago ON Reserva (k_serialPago ASC)
;

CREATE INDEX IXFK_Reserva_ZonaComun ON Reserva (k_zonaComun ASC)
;

ALTER TABLE Residente ADD CONSTRAINT PK_Residente
	PRIMARY KEY (k_tipoPersona,k_numeroPersona,k_apartamento)
;

ALTER TABLE Residente ADD CONSTRAINT CK_tipoPersona CHECK (k_tipoPersona in ('CC', 'TI', 'RC', 'CE'))
;

ALTER TABLE Residente ADD CONSTRAINT CK_apartamento CHECK (k_apartamento > 0)
;

CREATE INDEX IXFK_Residente_Apartamento ON Residente (k_apartamento ASC)
;

CREATE INDEX IXFK_Residente_Persona ON Residente (k_tipoPersona ASC,k_numeroPersona ASC)
;

ALTER TABLE Responsable ADD CONSTRAINT PK_Responsable
	PRIMARY KEY (k_tipoPersona,k_numeroPersona)
;

ALTER TABLE Responsable ADD CONSTRAINT CK_tipoPersona CHECK (k_tipoPersona in ('CC', 'TI', 'RC', 'CE'))
;

CREATE INDEX IXFK_Responsable_Persona ON Responsable (k_tipoPersona ASC,k_numeroPersona ASC)
;

ALTER TABLE ZonaComun ADD CONSTRAINT PK_ZonaComun
	PRIMARY KEY (k_zonaComun)
;

ALTER TABLE ZonaComun ADD CONSTRAINT CK_tipo CHECK (i_tipo in ('PISCINA', 'SALON', 'GIMNASIO', 'BARBACOA'))
;

ALTER TABLE ZonaComun ADD CONSTRAINT CK_costo CHECK (v_costo >= 0)
;

ALTER TABLE ZonaComun ADD CONSTRAINT CK_numeroDias CHECK (0 <= q_numeroDias AND q_numeroDias <= 31)
;

ALTER TABLE ZonaComun ADD CONSTRAINT CK_conjunto CHECK (k_conjunto > 0)
;

CREATE INDEX IXFK_ZonaComun_Conjunto ON ZonaComun (k_conjunto ASC)
;

/* Create Foreign Key Constraints */

ALTER TABLE Apartamento ADD CONSTRAINT FK_Apartamento_Responsable
	FOREIGN KEY (k_tipoPersona,k_numeroPersona) REFERENCES Responsable (k_tipoPersona,k_numeroPersona) ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE Concepto ADD CONSTRAINT FK_Concepto_Conjunto
	FOREIGN KEY (k_conjunto) REFERENCES Conjunto (k_conjunto) ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE CuentaCobro ADD CONSTRAINT FK_CuentaCobro_Apartamento
	FOREIGN KEY (k_apartamento) REFERENCES Apartamento (k_apartamento) ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE CuentaCobro ADD CONSTRAINT FK_CuentaCobro_Pago
	FOREIGN KEY (k_serialPago) REFERENCES Pago (k_serialPago) ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE DetalleCuenta ADD CONSTRAINT FK_DetalleCuenta_Concepto
	FOREIGN KEY (k_concepto) REFERENCES Concepto (k_concepto) ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE DetalleCuenta ADD CONSTRAINT FK_DetalleCuenta_CuentaCobro
	FOREIGN KEY (k_cuenta) REFERENCES CuentaCobro (k_cuenta) ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE Pago ADD CONSTRAINT FK_Pago_Reserva
	FOREIGN KEY (k_numeroReserva) REFERENCES Reserva (k_numeroReserva) ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE Parqueadero ADD CONSTRAINT FK_Parqueadero_Apartamento
	FOREIGN KEY (k_apartamento) REFERENCES Apartamento (k_apartamento) ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE Reserva ADD CONSTRAINT FK_Reserva_Pago
	FOREIGN KEY (k_serialPago) REFERENCES Pago (k_serialPago) ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE Reserva ADD CONSTRAINT FK_Reserva_ZonaComun
	FOREIGN KEY (k_zonaComun) REFERENCES ZonaComun (k_zonaComun) ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE Residente ADD CONSTRAINT FK_Residente_Apartamento
	FOREIGN KEY (k_apartamento) REFERENCES Apartamento (k_apartamento) ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE Residente ADD CONSTRAINT FK_Residente_Persona
	FOREIGN KEY (k_tipoPersona,k_numeroPersona) REFERENCES Persona (k_tipoPersona,k_numeroPersona) ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE Responsable ADD CONSTRAINT FK_Responsable_Persona
	FOREIGN KEY (k_tipoPersona,k_numeroPersona) REFERENCES Persona (k_tipoPersona,k_numeroPersona) ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE ZonaComun ADD CONSTRAINT FK_ZonaComun_Conjunto
	FOREIGN KEY (k_conjunto) REFERENCES Conjunto (k_conjunto) ON DELETE No Action ON UPDATE No Action
;

/* Create Table Comments, Sequences for Autonumber Columns */

COMMENT ON TABLE Apartamento
	IS 'Es una unidad de vivienda individual que forma parte de un edificio residencial más grande, compuesto por múltiples unidades similares.'
;

COMMENT ON COLUMN Apartamento.v_area
	IS 'Limitado hasta 9999.99m2, tampoco admite ingreso de 0m2.'
;

COMMENT ON COLUMN Apartamento.v_coeficiente
	IS 'NO ES UNA TASA (O sea, que no se suma, sino que multiplica al valor base del conjunto para todos los apartamentos) No admite ingreso menor a 1, tampoco mayor a 2.'
;

COMMENT ON COLUMN Apartamento.k_tipoPersona
	IS 'Tipo de documento entre: CC, TI, RC y CE.'
;

COMMENT ON TABLE Concepto
	IS 'Es la descripción clara y precisa del motivo por el cual se efectúa una transferencia de dinero o valor.'
;

COMMENT ON TABLE Conjunto
	IS 'Es un complejo habitacional compuesto por casas o departamentos independientes, que comparten áreas comunes como jardines, parques, áreas de juegos y vialidades internas.'
;

COMMENT ON COLUMN Conjunto.t_descuento
	IS 'Porcentaje en forma decimal'
;

COMMENT ON COLUMN Conjunto.t_mora
	IS 'Porcentaje en forma decimal'
;

COMMENT ON TABLE CuentaCobro
	IS 'Es un documento financiero utilizado para detallar y presentar los cargos correspondientes a bienes, servicios o conceptos específicos que se adeudan.'
;

COMMENT ON COLUMN CuentaCobro.i_estado
	IS 'Estado de la Cuenta de Cobro entre: PAGADA Y PENDIENTE.'
;

COMMENT ON COLUMN CuentaCobro.f_expedicionCuenta
	IS 'Fecha Expedicion Cuenta Cobro antes que Fecha Limite Descuento y antes que Fecha Pago Oportuno.'
;

COMMENT ON TABLE DetalleCuenta
	IS 'Es un desglose específico y detallado de todas las transacciones, cargos, abonos y movimientos financieros registrados en una cuenta de cobro durante un período determinado.'
;

COMMENT ON COLUMN DetalleCuenta.v_valor
	IS 'No admite ser 0, para que en la Cuenta de Cobro si un Concepto no tiene costo no aparezca.'
;

COMMENT ON TABLE Pago
	IS 'Es la transferencia de dinero o algún otro medio de valor desde una persona, entidad o cuenta a otra, generalmente en cumplimiento de una obligación financiera, contrato, o acuerdo comercial.'
;

COMMENT ON COLUMN Pago.i_metodo
	IS 'Metodo entre: EFECTIVO, DEBITO, CREDITO y ONLINE'
;

COMMENT ON COLUMN Pago.v_valor
	IS 'No admite ingreso de 0 porque es un pago que se haría con una entidad externa (Bancaria o de Pagos en linea), y nunca se haría un pago de $0.'
;

COMMENT ON TABLE Parqueadero
	IS 'Es una instalación designada y acondicionada para el estacionamiento de vehículos, ya sea de manera temporal o prolongada.'
;

COMMENT ON COLUMN Parqueadero.i_tipo
	IS 'Tipo de parqueadero entre: INDIVIDUAL, DOBLE y DISCAPACIDAD.'
;

COMMENT ON TABLE Persona
	IS 'Es cualquier individuo que esté asociado con dicho conjunto, ya sea como residente o como responsable de una unidad dentro del mismo. '
;

COMMENT ON COLUMN Persona.k_tipoPersona
	IS 'Tipo de documento entre: CC, TI, RC y CE.'
;

COMMENT ON TABLE Reserva
	IS 'Es el proceso mediante el cual un individuo, grupo o entidad solicita y asegura el derecho de uso exclusivo de una área compartida dentro de una propiedad o instalación durante un periodo de tiempo determinado. '
;

COMMENT ON COLUMN Reserva.f_ejecucion
	IS 'Fecha Ejecución previa a Fecha Limite y a Fecha Reservación.'
;

COMMENT ON COLUMN Reserva.i_estado
	IS 'Estado entre: PENDIENTE (9 caracts), PAGADA (6 caracts), CANCELADA (9 caracs), CUMPLIDA (8 caracs).'
;

COMMENT ON COLUMN Reserva.k_zonaComun
	IS 'En forma mnemotécnica (No está restringido por el modelo): Piscina1, Piscina2, Piscina3, etc.'
;

COMMENT ON TABLE Residente
	IS 'Es una persona que tiene su residencia principal o secundaria en un apartamento dentro del conjunto.'
;

COMMENT ON COLUMN Residente.k_tipoPersona
	IS 'Tipo de documento entre: CC, TI, RC y CE.'
;

COMMENT ON TABLE Responsable
	IS 'Se refiere a una persona que tiene la obligación o el deber de rendir cuentas, tomar decisiones, o llevar a cabo acciones específicas en relación a su(s) apartamento(s).'
;

COMMENT ON COLUMN Responsable.o_correo
	IS 'No hay un estandar entre empresas de Email, y la longitud del dominio (Lo que va despues de @) puede variar.'
;

COMMENT ON COLUMN Responsable.k_tipoPersona
	IS 'Tipo de documento entre: CC, TI, RC y CE.'
;

COMMENT ON TABLE ZonaComun
	IS 'Se refiere a las áreas y espacios dentro del conjunto que son de propiedad y uso compartido por todos los residentes.'
;

COMMENT ON COLUMN ZonaComun.k_zonaComun
	IS 'En forma mnemotécnica (No está restringido por el modelo): Piscina1, Piscina2, Piscina3, etc.'
;

COMMENT ON COLUMN ZonaComun.i_tipo
	IS 'Entre PISCINA, SALON, GIMNASIO Y BARBACOA'
;
